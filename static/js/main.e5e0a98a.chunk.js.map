{"version":3,"sources":["Component/Header/header.js","Component/Subscriber/Datalist/datalist.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","name","datalist","Container","Row","arraylist","Col","md","number","Button","color","onClick","delete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","postId","state","copyPostArray","assign","dataArray","push","id","setState","deleteHandler","index","splice","console","log","AddButtonHandler","isMove","BackButtonHandler","isButton","handleChange","bind","assertThisInitialized","key","e","target","value","activeComponent","_this2","post","map","posts","Subscriber_Datalist_datalist","Component_Header_header","FormGroup","Label","for","Input","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5e0a98a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nconst header=(props)=>\r\n{\r\n        return (\r\n            <div className=\"HeaderMain\">\r\n            <h3>{props.name}</h3>\r\n            </div>\r\n        );\r\n    }\r\nexport default header;","import React from 'react';\r\nimport './datalist.css';\r\nimport {Container,Row,Col,Button} from 'reactstrap';\r\nconst datalist=(props)=>\r\n{\r\n    return (\r\n        <Container className=\"container-fluid\">\r\n        <Row className=\"Rowpros\">\r\n        {props.arraylist}\r\n            <Col md=\"4\">{props.name}</Col>\r\n            <Col md=\"4\">{props.number}</Col>\r\n            <Col md=\"4\"><Button color=\"danger\" onClick={props.delete}><b>DELETE</b></Button></Col>\r\n        </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default datalist;","import React,{Component} from 'react';\nimport {Row,Col,Container, FormGroup, Label, Input,Button} from 'reactstrap';\nimport Header from './Component/Header/header';\nimport DataList from './Component/Subscriber/Datalist/datalist';\nimport './/Component/Subscriber/subscriber.css';\nimport './/Component/Subscriber/Datalist/datalist.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.postId=0;\n    this.state = {\n      name:'',\n      number:'',\n      id:\" \",\n      dataArray:[],\n      isMove:false,\n      isButton:false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(key) {\n    return function (e) {\n      var state = {};\n      state[key] = e.target.value;\n      this.setState(state);\n    }.bind(this);\n    \n  }\n  \n  handleSubmit=(event)=> {\n   this.postId=this.state.postId+1;\n   const copyPostArray=Object.assign([],this.state.dataArray)\n   copyPostArray.push({\n       id:this.postId,\n       name:this.state.name,\n       number:this.state.number\n   })\n   this.setState({\n       dataArray:copyPostArray\n   })\n  \n  }\n\n\n  deleteHandler =(index)=>\n  {\n    const copyPostArray=Object.assign([],this.state.dataArray);\n    copyPostArray.splice(index,1);\n    this.setState({\n      dataArray:copyPostArray\n    })\n    console.log(\"yes i am in\")\n  }\n\n\n  AddButtonHandler=()=>\n  {\n    this.setState({isMove:!this.state.isMove})\n    \n  }\n  BackButtonHandler=()=>\n  {\n    this.setState({isMove:!this.state.isMove})\n  }\n  render() {\n    const post= this.state.dataArray.map((posts,index)=>\n    {\n      return<DataList name={posts.name}\n      key={posts.id}\n      number={posts.number}\n      delete={this.deleteHandler.bind(this,index)}\n      />\n    })\n    let activeComponent;\n    if(this.state.isMove)\n    {\n     activeComponent= \n        <div>\n        <Header name=\"ADD SUBSCRIBER\"></Header>\n        <Container className=\"container-fluid\"> \n        <br></br>\n        <Row>\n            <Col md=\"4\">\n           <Button color=\"danger\" onClick={this.BackButtonHandler}>BACK</Button>\n            </Col>\n        </Row>\n            <Row>\n                <Col md=\"4\">\n                <FormGroup>\n          <Label for=\"PersonName\">Name</Label>\n          <Input type=\"text\" name=\"Name\" value={this.state.name} placeholder=\"Enter Your Name\" onChange={this.handleChange('name')} />\n        </FormGroup></Col>\n            </Row>\n        <Row><Col md=\"4\">\n        <FormGroup>\n          <Label for=\"Numberofperson\">Phone Number</Label>\n          <Input type=\"text\" name=\"Number\" value={this.state.number} placeholder=\"Enter Your Phone Number\" onChange={this.handleChange('number')}/>\n        </FormGroup>\n        </Col></Row>\n        <Row>\n            <Col md=\"4\">\n            <p><b>Subscriber to be added: </b></p>\n            <p>Name:{this.state.name}</p>\n            <p>Number:{this.state.number}</p>\n            </Col>\n        </Row>\n       <Row><Col md=\"4\">\n     <Button color=\"info\" onClick={this.handleSubmit}>Add</Button>\n       </Col></Row>\n        </Container>\n        </div>  \n    }else \n    {\n     activeComponent= <div>\n      <Header name=\"PHONE DIRECTORY\"></Header>\n  <Container className=\"container-fluid\">\n      <Row className=\"Rowpro\">\n        <Button color=\"success\" className=\"Addbutton\" onClick={this.AddButtonHandler}>ADD</Button>  \n      </Row>\n      <Row className=\"Rowpro\">\n          <Col md =\"4\"><b>NAME</b></Col>\n          <Col md=\"4\"><b>PHONE</b></Col>\n      </Row>\n  </Container>\n  {post}\n  </div>\n    }\n    return (\n      <div>\n        {activeComponent}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nconst app=(\n    <BrowserRouter>\n    <App/>\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}